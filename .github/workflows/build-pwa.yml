name: Publish Docker image PWA
env:
  DEPLOY_PACKAGE_NAME : "crm-api-platform-${{ github.sha }}"
  DEPLOY_VERSION : "v0.0.1"
  DEPLOY_FOLDER : "docker"  

#on:
#  release:
#    types: [published]

on:
  workflow_dispatch: {}
  push:
    #branches: [main]
    tags:
        - 'v*'

jobs:
  push_to_registries:
    name: Push Docker image to multiple registries
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: 01. Check out the repo
        uses: actions/checkout@v4

      - name: 02. Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 05. Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 06. Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}-pwa

      - name: 07. Execute few commands
        run : |
          echo "Deploy package name: ${{ env.DEPLOY_PACKAGE_NAME }}"
          echo "Deploy version: ${{ env.DEPLOY_VERSION }}"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo "Labels: ${{ steps.meta.outputs.labels }}"
          echo "Cache: ${{ github.repository }}-pwa:cache"
          
      - name: 08. Build and push Docker images
        uses: docker/build-push-action@v6
        with:
          context: ./pwa
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}-pwa:cache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}-pwa:cache,mode=max
  
  #deploy-pwa:
  #  name: Deploy pwa
  #  needs: push_to_registries
  #  runs-on: ubuntu-latest
  #  
  #  steps:
  #    - name: 01. Execure few commands
  #      run: |
  #        echo "Deploy application"
  #        echo "Appication name: ${{ env.DEPLOY_PACKAGE_NAME }}"
  #    
  #    #IP6
  #    - name: 02. Setup WARP
  #      uses: fscarmen/warp-on-actions@v1.3
  #      with:
  #        stack: dual
  #        mode: client
  #    
  #    #IP6
  #    - name: 03. Execute ls on remote server
  #      uses: appleboy/ssh-action@v1
  #      with:
  #        host: ${{ vars.SSH_HOST_NEXT_IP6 }}
  #        username: ${{ secrets.SSH_USER }}
  #        key: ${{ secrets.SSH_PRIVATE_KEY }}
  #        protocol: tcp6
  #        port: 22
  #        script: |
  #          whoami
  #          ls -la
  #    
  #    #IP6
  #    - name: 04. Restart container
  #      uses: appleboy/ssh-action@v1
  #      with:
  #        host: ${{ vars.SSH_HOST_NEXT_IP6 }}
  #        username: ${{ secrets.SSH_USER }}
  #        key: ${{ secrets.SSH_PRIVATE_KEY }}
  #        protocol: tcp6
  #        port: 22
  #        script: |
  #          cd /home/${{ secrets.SSH_USER }}/${{ env.DEPLOY_FOLDER }}
  #          docker compose -f compose-crm-api-platform.yml pull
  #          docker compose -f compose-crm-api-platform.yml down
  #          docker compose -f compose-crm-api-platform.yml up -d 
